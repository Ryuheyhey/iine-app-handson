{"version":3,"sources":["components/MainTable.tsx","components/InputForm.tsx","components/ImageList.tsx","components/ImageTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["twitterAPI","screen_name","max_id","endpoint","process","Promise","resolve","reject","axios","get","then","res","data","console","log","catch","err","MainTable","useState","message","setMessage","url","height","source","images","setImages","screenName","setScreenName","getIine","setIineImages","results","concat","String","length","useEffect","queue","window","addEventListener","clearTimeout","setTimeout","scroll_Y","document","documentElement","scrollTop","innerHeight","offsetHeight","onSubmit","handleSubmit","className","InputForm","props","handleChange","useCallback","e","target","value","preventDefault","type","autoCapitalize","name","onChange","disabled","ListItem","href","rel","src","alt","ImageList","items","raneItems","map","item","index","createRaneItems","rane_num","RaneItems","Array","fill","_i","RaneHeights","forEach","minHeightIndex","searchMinHeightIndex","push","minIndex","minHeight","RaneHeight","ImageTable","innerWidth","Math","floor","raneNum","setRaneNum","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.31cc2710.chunk.js","sourcesContent":["import axios from \"axios\"\nimport React, { FC, useEffect, useState } from \"react\"\nimport {InputForm, ImageTable} from \"./index\"\n\ntype typeImages = {\n  url: string[];\n  height: string[];\n  source: string[];\n  max_id: string;\n}\n\n\nconst twitterAPI = (screen_name: string, max_id: string) => {\n  let endpoint = `${process.env.REACT_APP_API_ENDPOINT_URL}/fav?name=${screen_name}&maxid=${max_id}`\n  return new Promise((resolve, reject) => {\n    axios.get(endpoint)\n      .then((res) => {\n        resolve(res.data);\n        console.log(endpoint)\n        console.log(res.data)\n      })\n      .catch((err) => {\n        reject(err);\n      });\n    })\n}\n\nconst MainTable: FC = () => {\n  const [message, setMessage] = useState(\"\")\n  const [images, setImages] = useState({\n    url: [],\n    height: [],\n    source: [],\n    max_id: \"\",\n  })\n  const [screenName, setScreenName] = useState(\"\")\n\n\n  const handleSubmit = (screen_name: string) => {\n    \n    // スクリーンネームが更新されたらImagesを初期化する\n    if(screen_name !== screenName) {\n      setMessage(\"Loading...\")\n      twitterAPI(screen_name, images.max_id).then((results: any) => {\n        setImages({\n          url: results.url, \n          height: results.height, \n          source: results.source, \n          max_id: results.max_id\n        })\n        setMessage(\"\")\n        setScreenName(screen_name)\n      }).catch(() => {\n        setMessage(\"取得に失敗しました。入力内容を確認してください。\")\n      })\n      // この時点ではリセットされてる\n      console.log(images)\n    } else {\n        setScreenName(screen_name)\n        setMessage(\"Loading...\")\n  \n        getIine(screen_name)\n    }\n\n    \n  }\n\n  const getIine = (screen_name: string) => {\n    twitterAPI(screen_name, images.max_id).then((res: any) => {\n      // if(screen_name !== screenName) {\n      //   setImages({\n      //     url: [], \n      //     height: [], \n      //     source: [], \n      //     max_id: \"\"\n      //   })\n      // }\n      console.log(res)\n      //ここでなぜかimagesが初期化させてない（一旦は初期化されている\n      console.log(images)\n      setIineImages(res)\n    }).catch(() => {\n      setMessage(\"取得に失敗しました。入力内容を確認してください。\")\n    })\n  }\n  \n  const setIineImages = (results: any) => {\n    // 既存のImagesにAPIの結果を追加で結合していく処理\n    setImages({\n      url: images.url.concat(results.url), \n      height: images.height.concat(results.height), \n      source: images.source.concat(results.source), \n      max_id: String(results.max_id)\n    })\n\n      if(results.url.length === 0) {\n        setMessage(\"いいねした画像がありませんでした。\")\n      }\n      setMessage(\"\")\n      console.log(images)\n    }\n\n    console.log(screenName)\n\n\n    useEffect(() => {\n      let queue: NodeJS.Timeout;\n      window.addEventListener(\"scroll\", () => {\n      clearTimeout(queue);\n      queue = setTimeout(() => {\n        const scroll_Y = document.documentElement.scrollTop + window.innerHeight;\n        const offsetHeight = document.documentElement.offsetHeight;\n        if (\n          offsetHeight - scroll_Y <= 1000 &&\n          message !== \"Loading...\" &&\n          offsetHeight > 1500\n        ) {\n          setMessage(\"Loading...\")\n          getIine(screenName);\n        }\n      }, 500);\n      })\n    },[])\n    \n\n  return (\n    <div>\n      <InputForm onSubmit={(screen_name: string) => handleSubmit(screen_name)} />\n      <ImageTable images={images} />\n      <div className=\"box h-64 text-center m-5 p-4 ...\">\n        {message}\n      </div> \n    </div>\n  )\n}\n\nexport default MainTable","import React, { useCallback, useState } from \"react\"\n\ntype typeInputFormState = {\n  screen_name: string\n}\n\ntype typeInputFormProps = {\n  onSubmit: any\n}\n\nconst InputForm = (props: typeInputFormProps) => {\n  const [screen_name, setScreenName] = useState(\"\")\n\n  const handleChange = useCallback((e: {target: {value: string}}) => {\n    setScreenName(e.target.value)\n  },[setScreenName])\n\n  const handleSubmit = useCallback((e:any) => {\n    props.onSubmit(screen_name)\n    e.preventDefault()\n  },[screen_name])\n\n  return (\n    <div>\n        <form onSubmit={handleSubmit}>\n          <div className=\"flex justify-center mb-5 mx-5\">\n            <p className=\"md-5\">\n              twitterのスクリーンネームを入力してください（例：@hukurouo）\n              <br />\n              <br />\n              その人がいいねした画像が良い感じに表示されます。\n            </p>\n          </div>\n          <div className=\"flex mb-5 mx-auto max-w-xs\">\n            <div className=\"mt-1 relative rounded-md shadow-sm mx-5 w-11/12\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <span className=\"text-gray-500 sm:text-sm\">@</span>\n              </div>\n              <input\n                type=\"text\"\n                autoCapitalize=\"off\"\n                name=\"screen_name\"\n                value={screen_name}\n                onChange={handleChange}\n                className=\"bg-white focus:outline-none focus:shadow-outline py-2 px-8 rounded-md w-full\"\n              />\n            </div>\n          </div>\n          <div className=\"flex justify-center mb-5 mx-5\">\n            <input\n              type=\"submit\"\n              value=\"取得\"\n              disabled={screen_name === \"\"}\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-2 mx-2 rounded w-20 mb-10\"\n            />\n          </div>\n        </form>\n      </div>\n\n  )\n}\n\nexport default InputForm","import React from \"react\"\n\ntype RaneItems = {\n  url: string\n  source: string\n}\ntype ImageListProps = {\n  raneItems: RaneItems[]\n}\n\nconst ListItem = (props: RaneItems) => {\n  return (\n    <a href={props.source} target=\"_blank\" rel=\"noopener noreferrer\">\n      <img src={props.url} alt=\"\"/>\n    </a>\n  )\n}\n\nconst ImageList = (props: ImageListProps) => {\n  \n\n  const listItems = (items: RaneItems[]) => {\n    return (\n      <div className=\"flex flex-col\">\n        {items.map((item:RaneItems, index:number) => {\n          return (\n            <div key={index}>\n              <div className=\"m-1 max-w-xs\">\n                <ListItem url={item.url} source={item.source} />\n              </div>\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      {listItems(props.raneItems)}\n    </div>\n  )\n}\n\nexport default ImageList","import React, { FC, useEffect, useState } from \"react\"\nimport {ImageList} from \"./index\"\n\ntype ImageTableProps = {\n  images: Items\n}\n\ntype Items = {\n  url: string[]\n  height: number[]\n  source: string[]\n  max_id: string\n}\n\ntype RaneItems = {\n  url: string\n  source: string\n}\n\n// レーンの数だけRaneItemを生成\nconst createRaneItems = (rane_num: number, items: Items): RaneItems[][] => {\n  // [][]は、配列が入った配列\n  // ３つ配列を生成して、fillで[]の形に初期化\n  const RaneItems: RaneItems[][] = Array(rane_num).fill([]).map(_i=>([]))\n  // 配列の中身を０に初期化したもの\n  const RaneHeights: number[] = Array(rane_num).fill(0);\n  // 一個一個の画像をitemに入れる\n  items.url.forEach((item: string, index: number) => {\n    const minHeightIndex = searchMinHeightIndex(RaneHeights);\n    RaneHeights[minHeightIndex] += items.height[index];\n    RaneItems[minHeightIndex].push({ url: item, source: items.source[index] });\n    \n  });\n  return RaneItems;\n}\n\nconst searchMinHeightIndex = (RaneHeights: number[]) => {\n  let minIndex = 0\n  let minHeight = 100000\n  RaneHeights.forEach((RaneHeight, index) => {\n    if (minHeight > RaneHeight) {\n      minIndex = index\n      minHeight = RaneHeight\n    }\n  })\n  return minIndex\n}\n\nconst ImageTable = (props: ImageTableProps) => {\n  const [raneNum, setRaneNum] = useState(\n    window.innerWidth > 600 ? Math.floor(window.innerWidth / 300) : 2\n  )\n\n  useEffect(() => {\n    let queue: NodeJS.Timeout\n    // 0.5秒間、画面サイズが変更されなかったら画面更新\n    window.addEventListener(\"resize\", () => {\n      clearTimeout(queue)\n      queue = setTimeout(() => {\n        const raneNum = window.innerWidth > 600 ? Math.floor(window.innerWidth / 300) : 2\n        setRaneNum(raneNum)\n      }, 500)\n    })\n  },[])\n\n\n  return (\n     <div className=\"flex m-1\">\n       {createRaneItems(raneNum, props.images).map((items: RaneItems[], index) => (\n         <div key={index}>\n           <ImageList raneItems={items}/>\n         </div>\n         )\n       )}\n     </div>\n   )\n}\n\n\nexport default ImageTable","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {MainTable} from \"./components/index\"\nimport {Helmet, HelmetProvider} from \"react-helmet-async\"\n\nfunction App() {\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>iine-app-handson</title>\n      </Helmet>\n    <div className=\"bg-blue-50 min-h-screen\">\n      <div className=\"container mx-auto\">\n        <header className=\"flex justify-center items-center text-3xl h-32 mx-5\">\n          いいねした画像を並べる\n        </header>\n        <div className=\"flex justify-center\">\n          <MainTable />\n        </div>\n      </div>\n    </div>\n    </HelmetProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}